{"version":3,"sources":["components/Form.js","components/Task.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","addTask","categoryOptions","useState","title","setTitle","description","setDescription","Date","startDate","setStartDate","category","setCategory","className","onSubmit","event","preventDefault","alert","type","value","name","onChange","target","map","date","Task","task","index","completeTask","incompleteTask","deleteTask","isCompleted","alt","src","style","textDecoration","display","moment","format","onClick","App","taskList","setTaskList","newTask","splice","length","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a2a674d7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Form.css\";\nimport DatePicker from \"react-date-picker\";\n\nexport default function Form(props) {\n  const { addTask } = props;\n\n  const categoryOptions = [\n    \"Chores\",\n    \"Groceries\",\n    \"Outing\",\n    \"School\",\n    \"Shopping\",\n    \"Work\",\n    \"None\",\n  ];\n\n  const [title, setTitle] = useState(\"\"); //set default title to empty\n  const [description, setDescription] = useState(\"\"); //set default desc to empty\n  const [startDate, setStartDate] = useState(new Date()); //set default date to today\n  const [category, setCategory] = useState(categoryOptions[0]); //set default category to index 0\n\n  //Handles form onSubmit\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    //Error handling\n    if (!title || !startDate) {\n      alert(\"Please fill out Title and Date\");\n      return;\n    }\n\n    //call prop\n    addTask(title, description, category, startDate);\n\n    // Reset form fields\n    setTitle(\"\");\n    setDescription(\"\");\n    setStartDate(new Date());\n  };\n\n  return (\n    <form className=\"form\" onSubmit={handleSubmit}>\n      <span>Title:</span>\n      <input\n        type=\"text\"\n        value={title}\n        name=\"Title\"\n        onChange={(event) => setTitle(event.target.value)}\n      />\n      <span>Description:</span>\n      <input\n        type=\"text\"\n        value={description}\n        name=\"Description\"\n        onChange={(event) => setDescription(event.target.value)}\n      />\n      <div className=\"form-category\">\n        <label>\n          Pick a category:&nbsp;\n          <select onChange={(event) => setCategory(event.target.value)}>\n            {categoryOptions.map((category) => (\n              <option value={category}>{category}</option>\n            ))}\n            {/* Adding none option */}\n            <option value=\"\">None</option>\n          </select>\n        </label>\n      </div>\n      <span>Due By:&nbsp;</span>\n      <DatePicker value={startDate} onChange={(date) => setStartDate(date)} />\n      <button className=\"add-task\" type=\"submit\">\n        Add Task\n      </button>\n    </form>\n  );\n}\n","import React from \"react\";\nimport moment from \"moment\";\nimport \"./Task.css\";\n\nfunction Task(props) {\n  const { task, index, completeTask, incompleteTask, deleteTask } = props;\n\n  return (\n    <div>\n      <div className=\"task\">\n        <div className=\"pending-complete\">\n          {!task.isCompleted ? (\n            <p className=\"pending\">\n              <img\n                alt=\"high-importance-icon\"\n                src=\"https://img.icons8.com/officel/35/000000/high-importance.png\"\n              ></img>\n            </p>\n          ) : (\n            <p className=\"completed\">\n              <img\n                alt=\"checkmark-icon\"\n                src=\"https://img.icons8.com/cotton/35/000000/checkmark.png\"\n              ></img>\n            </p>\n          )}\n        </div>\n        <div\n          className=\"task-title-desc\"\n          style={{ textDecoration: task.isCompleted ? \"line-through\" : \"\" }}\n        >\n          {/* */}\n          <p>Task:&nbsp;{task.title}</p>\n        </div>\n        <p style={{ display: !task.description ? \"none\" : \"block\" }}>\n          Description:&nbsp;{task.description}\n        </p>\n        <p\n          className=\"task-category\"\n          style={{ display: !task.category ? \"none\" : \"block\" }}\n        >\n          {task.category}\n        </p>\n        <div className=\"dueBy\">\n          Due By:&nbsp;\n          {moment(task.startDate).format(\"MMM Do YYYY\")}\n        </div>\n        <div className=\"complete-delete\">\n          {!task.isCompleted ? (\n            <button className=\"complete\" onClick={() => completeTask(index)}>\n              Complete\n            </button>\n          ) : (\n            <button className=\"complete\" onClick={() => incompleteTask(index)}>\n              Incomplete\n            </button>\n          )}\n          <button className=\"delete\" onClick={() => deleteTask(index)}>\n            Delete\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Task;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form\";\nimport Task from \"./components/Task\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  const [taskList, setTaskList] = useState([\n    {\n      title: \"Interview Fatima A\",\n      description:\n        \"Junior Developer with a passion for changing lives through tech\",\n      category: \"Work\",\n      startDate: new Date(),\n      isCompleted: false\n    }\n  ]);\n\n  // Add a new task to array\n  const addTask = (title, description, category, startDate) => {\n    const newTask = [...taskList, { title, description, category, startDate }];\n    setTaskList(newTask);\n  };\n\n  // Toggle isCompleted status for task to complete\n  const completeTask = index => {\n    const newTask = [...taskList];\n    newTask[index].isCompleted = true;\n    setTaskList(newTask);\n  };\n\n  // Toggle isCompleted status for task to incomplete\n  const incompleteTask = index => {\n    const newTask = [...taskList];\n    newTask[index].isCompleted = false;\n    setTaskList(newTask);\n  };\n\n  // Removes a task from array\n  const deleteTask = index => {\n    const newTask = [...taskList];\n    newTask.splice(index, 1);\n    setTaskList(newTask);\n  };\n\n  // Clears all tasks from array\n  const clearTaskList = () => {\n    setTaskList([]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"todo-title\">\n        <img\n          alt=\"to do list with heart\"\n          src=\"https://img.icons8.com/plasticine/80/000000/wish-list.png\"\n        ></img>\n        To Do List\n      </h1>\n      <div className=\"task-list-section\">\n        <Form addTask={addTask} />\n      </div>\n      <div className=\"task-list\">\n        <h3 className=\"tasks-card-title\">Tasks</h3>\n        {taskList.length ? (\n          taskList.map((task, index) => (\n            <Task\n              key={index}\n              index={index}\n              task={task}\n              completeTask={completeTask}\n              incompleteTask={incompleteTask}\n              deleteTask={deleteTask}\n            />\n          ))\n        ) : (\n          <p className=\"clear-task-message\">Please add a task</p>\n        )}\n      </div>\n      <button className=\"clear-task\" onClick={clearTaskList}>\n        Clear All Tasks\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}